{"ast":null,"code":"import { ElementRef, EventEmitter } from '@angular/core';\nimport ClassicEditorBuild from '../../../vendor/ckeditor5/build/classic-editor-with-revision-history.js';\nimport { getRevisionHistoryAdapter } from './revision-history-adapter';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ckeditor/ckeditor5-angular\";\nconst _c0 = [\"sidebar\"];\nexport let RevisionHistoryAdapterComponent = /*#__PURE__*/(() => {\n  class RevisionHistoryAdapterComponent {\n    constructor() {\n      this.ready = new EventEmitter();\n      this.Editor = ClassicEditorBuild.ClassicEditorWithRevisionHistory;\n      this.data = this.getInitialData();\n      this.STORAGE_KEY = 'ckeditor-license-key';\n      this.licenseKey = '';\n      this.appData = {\n        // The ID of the current user.\n        userId: 'u1',\n        // Users data.\n        users: [{\n          id: 'u1',\n          name: 'Joe Doe',\n          // Note that the avatar is optional.\n          avatar: 'https://randomuser.me/api/portraits/thumb/men/26.jpg'\n        }],\n        // Suggestion threads data.\n        suggestions: [],\n        // Comment threads data.\n        comments: []\n      };\n      // Note that Angular refs can be used once the view is initialized so we need to create\n      // this container and use in the above editor configuration to work around this problem.\n      this.sidebar = document.createElement('div');\n      this.boundRefreshDisplayMode = this.refreshDisplayMode.bind(this);\n      this.boundCheckPendingActions = this.checkPendingActions.bind(this);\n    }\n    get editorConfig() {\n      return {\n        extraPlugins: [getRevisionHistoryAdapter(this.appData)],\n        sidebar: {\n          container: this.sidebar\n        },\n        licenseKey: this.licenseKey,\n        revisionHistory: {\n          editorContainer: document.querySelector('#editor-container'),\n          viewerContainer: document.querySelector('#revision-viewer-container'),\n          viewerEditorElement: document.querySelector('#revision-viewer-editor'),\n          viewerSidebarContainer: document.querySelector('#revision-viewer-sidebar')\n        },\n        collaboration: {\n          channelId: 'document-1'\n        },\n        autosave: {\n          save: editor => {\n            const revisionTracker = editor.plugins.get('RevisionTracker');\n            return revisionTracker.update();\n          }\n        }\n      };\n    }\n    ngOnInit() {\n      window.CKBox = ClassicEditorBuild.CKBox;\n      // Save the provided license key in the local storage.\n      this.licenseKey = window.localStorage.getItem(this.STORAGE_KEY) || window.prompt('Your license key');\n      window.localStorage.setItem(this.STORAGE_KEY, this.licenseKey);\n    }\n    ngAfterViewInit() {\n      if (!this.sidebarContainer) {\n        throw new Error('Div container for sidebar was not found');\n      }\n      this.sidebarContainer.nativeElement.appendChild(this.sidebar);\n    }\n    ngOnDestroy() {\n      window.removeEventListener('resize', this.boundRefreshDisplayMode);\n      window.removeEventListener('beforeunload', this.boundCheckPendingActions);\n    }\n    onReady(editor) {\n      this.editor = editor;\n      this.ready.emit(editor);\n      // Prevent closing the tab when any action is pending.\n      window.addEventListener('beforeunload', this.boundCheckPendingActions);\n      // Switch between inline and sidebar annotations according to the window size.\n      window.addEventListener('resize', this.boundRefreshDisplayMode);\n      this.refreshDisplayMode();\n    }\n    resetLicenseKey() {\n      window.localStorage.removeItem(this.STORAGE_KEY);\n      window.location.reload();\n    }\n    checkPendingActions(domEvt) {\n      if (this.editor.plugins.get('PendingActions').hasAny) {\n        domEvt.preventDefault();\n        domEvt.returnValue = true;\n      }\n    }\n    showEditorDataInConsole(evt) {\n      const editorData = this.editor.data.get();\n      const trackChanges = this.editor.plugins.get('TrackChanges');\n      const comments = this.editor.plugins.get('CommentsRepository');\n      const revisionsRepositoryPlugin = this.editor.plugins.get('RevisionsRepository');\n      const revisionsData = revisionsRepositoryPlugin.getRevisions();\n      const suggestionsData = trackChanges.getSuggestions();\n      const commentThreadsData = comments.getCommentThreads({\n        skipNotAttached: true,\n        skipEmpty: true\n      });\n      console.log('Editor data:');\n      console.log(editorData);\n      console.log('Suggestions data:');\n      console.log(suggestionsData);\n      console.log('Comment threads data:');\n      console.log(commentThreadsData);\n      console.log('Revisions data:');\n      console.log(revisionsData);\n      evt.preventDefault();\n    }\n    refreshDisplayMode() {\n      const annotationsUIs = this.editor.plugins.get('AnnotationsUIs');\n      const sidebarElement = this.sidebarContainer.nativeElement;\n      if (window.innerWidth < 1070) {\n        sidebarElement.classList.remove('narrow');\n        sidebarElement.classList.add('hidden');\n        annotationsUIs.switchTo('inline');\n      } else if (window.innerWidth < 1300) {\n        sidebarElement.classList.remove('hidden');\n        sidebarElement.classList.add('narrow');\n        annotationsUIs.switchTo('narrowSidebar');\n      } else {\n        sidebarElement.classList.remove('hidden', 'narrow');\n        annotationsUIs.switchTo('wideSidebar');\n      }\n    }\n    getInitialData() {\n      return `\n\t\t<figure class=\"image\">\n\t\t<img src=\"assets/images/revision-history-demo.png\">\n\t\t</figure>\n\t\t<h1>PUBLISHING AGREEMENT</h1>\n\t\t<h3>Introduction</h3>\n\t\t<p>This publishing contract, the “contract”, is entered into as of 1st June 2020 by and between The Lower Shelf, the “Publisher”, and John Smith, the “Author”.</p>\n\t\t<h3>Grant of Rights</h3>\n\t\t<p>The Author grants the Publisher full right and title to the following, in perpetuity:</p>\n\t\t<ul>\n\t\t\t<li>To publish, sell, and profit from the listed works in all languages and formats in existence today and at any point in the future.</li>\n\t\t\t<li>To create or devise modified, abridged, or derivative works based on the works listed.</li>\n\t\t\t<li>To allow others to use the listed works at their discretion, without providing additional compensation to the Author.</li>\n\t\t</ul>\n\t\t<p>These rights are granted by the Author on behalf of him and their successors, heirs, executors, and any other party who may attempt to lay claim to these rights at any point now or in the future.</p>\n\t\t<p>Any rights not granted to the Publisher above remain with the Author.</p>\n\t\t<p>The rights granted to the Publisher by the Author shall not be constrained by geographic territories and are considered global in nature.</p>\n\t\t`;\n    }\n  }\n  RevisionHistoryAdapterComponent.ɵfac = function RevisionHistoryAdapterComponent_Factory(t) {\n    return new (t || RevisionHistoryAdapterComponent)();\n  };\n  RevisionHistoryAdapterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RevisionHistoryAdapterComponent,\n    selectors: [[\"revision-history-adapter\"]],\n    viewQuery: function RevisionHistoryAdapterComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.sidebarContainer = _t.first);\n      }\n    },\n    outputs: {\n      ready: \"ready\"\n    },\n    decls: 48,\n    vars: 3,\n    consts: [[1, \"centered\"], [\"href\", \"https://ckeditor.com/ckeditor-5/\", \"target\", \"_blank\", \"rel\", \"noopener noreferrer\"], [\"src\", \"https://c.cksource.com/a/1/logos/ckeditor5.svg\", \"alt\", \"CKEditor 5 logo\"], [\"href\", \"https://ckeditor.com/ckeditor-5/revision-history/\", \"target\", \"_blank\", \"rel\", \"noopener noreferrer\"], [\"href\", \"https://ckeditor.com/docs/ckeditor5/latest/features/revision-history/revision-history.html\", \"target\", \"_blank\", \"rel\", \"noopener noreferrer\"], [1, \"message\"], [1, \"row\", \"row-editor\", \"editors-holder\"], [\"id\", \"editor-container\", 1, \"editor-container\"], [1, \"editor-container\", 3, \"editor\", \"config\", \"data\", \"ready\"], [\"id\", \"sidebar-container\", 1, \"sidebar\", \"sidebar-container\"], [\"sidebar\", \"\"], [\"id\", \"revision-viewer-container\"], [1, \"editor-container\"], [\"id\", \"revision-viewer-editor\"], [\"id\", \"revision-viewer-sidebar\", 1, \"sidebar-container\"], [1, \"row\", \"row-info\"], [1, \"get-data\", 3, \"click\"], [1, \"remove-license-key\", 3, \"click\"], [\"href\", \"https://cksource.com/\", \"target\", \"_blank\", \"rel\", \"noopener noreferrer\"]],\n    template: function RevisionHistoryAdapterComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"header\")(1, \"div\", 0)(2, \"h1\")(3, \"a\", 1);\n        i0.ɵɵelement(4, \"img\", 2);\n        i0.ɵɵtext(5, \" CKEditor 5 \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(6, \"nav\")(7, \"ul\")(8, \"li\")(9, \"a\", 3);\n        i0.ɵɵtext(10, \"Website\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(11, \"li\")(12, \"a\", 4);\n        i0.ɵɵtext(13, \"Documentation\");\n        i0.ɵɵelementEnd()()()()()();\n        i0.ɵɵelementStart(14, \"main\")(15, \"div\", 5)(16, \"div\", 0)(17, \"h1\");\n        i0.ɵɵtext(18, \"CKEditor 5 revision history adapter integration for Angular\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(19, \"div\", 0)(20, \"div\", 6)(21, \"div\", 7)(22, \"ckeditor\", 8);\n        i0.ɵɵlistener(\"ready\", function RevisionHistoryAdapterComponent_Template_ckeditor_ready_22_listener($event) {\n          return ctx.onReady($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(23, \"div\", 9, 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"div\", 11)(26, \"div\", 12);\n        i0.ɵɵelement(27, \"div\", 13)(28, \"div\", 14);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(29, \"div\", 15);\n        i0.ɵɵtext(30, \" See the editor data in the console. \");\n        i0.ɵɵelementStart(31, \"button\", 16);\n        i0.ɵɵlistener(\"click\", function RevisionHistoryAdapterComponent_Template_button_click_31_listener($event) {\n          return ctx.showEditorDataInConsole($event);\n        });\n        i0.ɵɵtext(32, \"Get editor data\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(33, \"div\", 15);\n        i0.ɵɵtext(34, \" Your license key is stored in the local storage. \");\n        i0.ɵɵelementStart(35, \"button\", 17);\n        i0.ɵɵlistener(\"click\", function RevisionHistoryAdapterComponent_Template_button_click_35_listener() {\n          return ctx.resetLicenseKey();\n        });\n        i0.ɵɵtext(36, \"Reset license key\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(37, \"footer\")(38, \"div\", 0)(39, \"p\")(40, \"a\", 1);\n        i0.ɵɵtext(41, \"CKEditor 5\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(42, \" \\u2013 Rich text editor of tomorrow, available today \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(43, \"p\");\n        i0.ɵɵtext(44, \" Copyright \\u00A9 2003-2024, \");\n        i0.ɵɵelementStart(45, \"a\", 18);\n        i0.ɵɵtext(46, \"CKSource\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(47, \" Holding sp. z o.o. All rights reserved. \");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(22);\n        i0.ɵɵproperty(\"editor\", ctx.Editor)(\"config\", ctx.editorConfig)(\"data\", ctx.data);\n      }\n    },\n    dependencies: [i1.CKEditorComponent]\n  });\n  return RevisionHistoryAdapterComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}