{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nexport function getTrackChangesAdapter(appData) {\n  return class TrackChangesAdapter {\n    constructor(editor) {\n      this.editor = editor;\n    }\n    init() {\n      const usersPlugin = this.editor.plugins.get('Users');\n      const trackChangesPlugin = this.editor.plugins.get('TrackChanges');\n      const commentsRepositoryPlugin = this.editor.plugins.get('CommentsRepository');\n      // Load the users data.\n      for (const user of appData.users) {\n        usersPlugin.addUser(user);\n      }\n      // Set the current user.\n      usersPlugin.defineMe(appData.userId);\n      // Set the adapter to the `TrackChanges#adapter` property.\n      trackChangesPlugin.adapter = {\n        getSuggestion: suggestionId => {\n          // This function should query the database for data for a suggestion with a `suggestionId`.\n          console.log('Get suggestion', suggestionId);\n          return new Promise(resolve => {\n            resolve(appData.suggestions.find(suggestion => suggestionId === suggestion.id));\n          });\n        },\n        addSuggestion: suggestionData => {\n          // This function should save `suggestionData` in the database.\n          console.log('Suggestion added', suggestionData);\n          return Promise.resolve({\n            createdAt: new Date() // Should be set server-side.\n          });\n        },\n        updateSuggestion: (id, suggestionData) => {\n          // This function should update `suggestionData` in the database.\n          console.log('Suggestion updated', id, suggestionData);\n          return Promise.resolve();\n        }\n      };\n      // Track changes uses comments to allow discussing about the suggestions.\n      // The comments adapter has to be defined as well.\n      commentsRepositoryPlugin.adapter = {\n        getCommentThread: ({\n          threadId\n        }) => {\n          // This function should query the database for data for the comment thread with a `commentThreadId`.\n          console.log('Get comment thread', threadId);\n          return new Promise(resolve => {\n            resolve(appData.comments.find(comment => threadId === comment.threadId));\n          });\n        },\n        addCommentThread: data => {\n          // Write a request to your database here. The returned `Promise`\n          // should be resolved when the request has finished.\n          console.log('Comment thread added', data);\n          return Promise.resolve({\n            threadId: data.threadId,\n            comments: data.comments.map(comment => ({\n              commentId: comment.commentId,\n              createdAt: new Date()\n            })) // Should be set on the server side.\n          });\n        },\n        updateCommentThread: data => {\n          // This function should save `data` in the database.\n          console.log('Comment thread updated', data);\n          return Promise.resolve();\n        },\n        resolveCommentThread: data => {\n          // This function should save `data` in the database.\n          console.log('Comment thread resolved', data);\n          return Promise.resolve({\n            resolvedAt: new Date(),\n            resolvedBy: usersPlugin.me.id // Should be set on the server side.\n          });\n        },\n        reopenCommentThread: data => {\n          // This function should save `data` in the database.\n          console.log('Comment thread reopened', data);\n          return Promise.resolve();\n        },\n        removeCommentThread: data => {\n          // This function should remove the comment of a given `data` from the database.\n          console.log('Comment thread removed', data);\n          return Promise.resolve();\n        },\n        addComment: data => {\n          // This function should save `data` in the database.\n          console.log('Comment added', data);\n          return Promise.resolve({\n            commentId: data.commentId,\n            createdAt: new Date() // Should be set server-side.\n          });\n        },\n        updateComment: data => {\n          // This function should save `data` in the database.\n          console.log('Comment updated', data);\n          return Promise.resolve();\n        },\n        removeComment: data => {\n          // This function should remove the comment of a given `data` from the database.\n          console.log('Comment removed', data);\n          return Promise.resolve();\n        }\n      };\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module"}