{"ast":null,"code":"import { __awaiter } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, forwardRef, Component, Input, Output, NgModule } from '@angular/core';\nimport { first } from 'rxjs/operators';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n// A copy of @ckeditor/ckeditor5-utils/src/uid.js\n// A hash table of hex numbers to avoid using toString() in uid() which is costly.\n// [ '00', '01', '02', ..., 'fe', 'ff' ]\nfunction CKEditorComponent_ng_template_0_Template(rf, ctx) {}\nconst HEX_NUMBERS = new Array(256).fill(0).map((val, index) => ('0' + index.toString(16)).slice(-2));\n/**\n * Returns a unique id. The id starts with an \"e\" character and a randomly generated string of\n * 32 alphanumeric characters.\n *\n * **Note**: The characters the unique id is built from correspond to the hex number notation\n * (from \"0\" to \"9\", from \"a\" to \"f\"). In other words, each id corresponds to an \"e\" followed\n * by 16 8-bit numbers next to each other.\n *\n * @returns An unique id string.\n */\nfunction uid() {\n  // Let's create some positive random 32bit integers first.\n  //\n  // 1. Math.random() is a float between 0 and 1.\n  // 2. 0x100000000 is 2^32 = 4294967296.\n  // 3. >>> 0 enforces integer (in JS all numbers are floating point).\n  //\n  // For instance:\n  //\t\tMath.random() * 0x100000000 = 3366450031.853859\n  // but\n  //\t\tMath.random() * 0x100000000 >>> 0 = 3366450031.\n  const r1 = Math.random() * 0x100000000 >>> 0;\n  const r2 = Math.random() * 0x100000000 >>> 0;\n  const r3 = Math.random() * 0x100000000 >>> 0;\n  const r4 = Math.random() * 0x100000000 >>> 0;\n  // Make sure that id does not start with number.\n  return 'e' + HEX_NUMBERS[r1 >> 0 & 0xFF] + HEX_NUMBERS[r1 >> 8 & 0xFF] + HEX_NUMBERS[r1 >> 16 & 0xFF] + HEX_NUMBERS[r1 >> 24 & 0xFF] + HEX_NUMBERS[r2 >> 0 & 0xFF] + HEX_NUMBERS[r2 >> 8 & 0xFF] + HEX_NUMBERS[r2 >> 16 & 0xFF] + HEX_NUMBERS[r2 >> 24 & 0xFF] + HEX_NUMBERS[r3 >> 0 & 0xFF] + HEX_NUMBERS[r3 >> 8 & 0xFF] + HEX_NUMBERS[r3 >> 16 & 0xFF] + HEX_NUMBERS[r3 >> 24 & 0xFF] + HEX_NUMBERS[r4 >> 0 & 0xFF] + HEX_NUMBERS[r4 >> 8 & 0xFF] + HEX_NUMBERS[r4 >> 16 & 0xFF] + HEX_NUMBERS[r4 >> 24 & 0xFF];\n}\nconst ANGULAR_INTEGRATION_READ_ONLY_LOCK_ID = 'Lock from Angular integration (@ckeditor/ckeditor5-angular)';\nlet CKEditorComponent = /*#__PURE__*/(() => {\n  class CKEditorComponent {\n    constructor(elementRef, ngZone) {\n      /**\n       * The configuration of the editor.\n       * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editorconfig-EditorConfig.html\n       * to learn more.\n       */\n      this.config = {};\n      /**\n       * The initial data of the editor. Useful when not using the ngModel.\n       * See https://angular.io/api/forms/NgModel to learn more.\n       */\n      this.data = '';\n      /**\n       * Tag name of the editor component.\n       *\n       * The default tag is 'div'.\n       */\n      this.tagName = 'div';\n      /**\n       * Allows disabling the two-way data binding mechanism. Disabling it can boost performance for large documents.\n       *\n       * When a component is connected using the [(ngModel)] or [formControl] directives and this value is set to true then none of the data\n       * will ever be synchronized.\n       *\n       * An integrator must call `editor.data.get()` manually once the application needs the editor's data.\n       * An editor instance can be received in the `ready()` callback.\n       */\n      this.disableTwoWayDataBinding = false;\n      /**\n       * Fires when the editor is ready. It corresponds with the `editor#ready`\n       * https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editor-Editor.html#event-ready\n       * event.\n       */\n      this.ready = new EventEmitter();\n      /**\n       * Fires when the content of the editor has changed. It corresponds with the `editor.model.document#change`\n       * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_model_document-Document.html#event-change\n       * event.\n       */\n      this.change = new EventEmitter();\n      /**\n       * Fires when the editing view of the editor is blurred. It corresponds with the `editor.editing.view.document#blur`\n       * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_view_document-Document.html#event-event:blur\n       * event.\n       */\n      this.blur = new EventEmitter();\n      /**\n       * Fires when the editing view of the editor is focused. It corresponds with the `editor.editing.view.document#focus`\n       * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_view_document-Document.html#event-event:focus\n       * event.\n       */\n      this.focus = new EventEmitter();\n      /**\n       * Fires when the editor component crashes.\n       */\n      this.error = new EventEmitter();\n      /**\n       * If the component is read–only before the editor instance is created, it remembers that state,\n       * so the editor can become read–only once it is ready.\n       */\n      this.initiallyDisabled = false;\n      /**\n       * A lock flag preventing from calling the `cvaOnChange()` during setting editor data.\n       */\n      this.isEditorSettingData = false;\n      this.id = uid();\n      this.ngZone = ngZone;\n      this.elementRef = elementRef;\n      this.checkVersion();\n    }\n    /**\n     * When set `true`, the editor becomes read-only.\n     * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editor-Editor.html#member-isReadOnly\n     * to learn more.\n     */\n    set disabled(isDisabled) {\n      this.setDisabledState(isDisabled);\n    }\n    get disabled() {\n      if (this.editorInstance) {\n        return this.editorInstance.isReadOnly;\n      }\n      return this.initiallyDisabled;\n    }\n    /**\n     * The instance of the editor created by this component.\n     */\n    get editorInstance() {\n      let editorWatchdog = this.editorWatchdog;\n      if (this.watchdog) {\n        // Temporarily use the `_watchdogs` internal map as the `getItem()` method throws\n        // an error when the item is not registered yet.\n        // See https://github.com/ckeditor/ckeditor5-angular/issues/177.\n        // TODO should be able to change when new chages in Watcdog are released.\n        editorWatchdog = this.watchdog._watchdogs.get(this.id);\n      }\n      if (editorWatchdog) {\n        return editorWatchdog.editor;\n      }\n      return null;\n    }\n    getId() {\n      return this.id;\n    }\n    checkVersion() {\n      // To avoid issues with the community typings and CKEditor 5, let's treat window as any. See #342.\n      const {\n        CKEDITOR_VERSION\n      } = window;\n      if (!CKEDITOR_VERSION) {\n        return console.warn('Cannot find the \"CKEDITOR_VERSION\" in the \"window\" scope.');\n      }\n      const [major] = CKEDITOR_VERSION.split('.').map(Number);\n      if (major >= 42 || CKEDITOR_VERSION.startsWith('0.0.0')) {\n        return;\n      }\n      console.warn('The <CKEditor> component requires using CKEditor 5 in version 42+ or nightly build.');\n    }\n    // Implementing the OnChanges interface. Whenever the `data` property is changed, update the editor content.\n    ngOnChanges(changes) {\n      if (Object.prototype.hasOwnProperty.call(changes, 'data') && changes.data && !changes.data.isFirstChange()) {\n        this.writeValue(changes.data.currentValue);\n      }\n    }\n    // Implementing the AfterViewInit interface.\n    ngAfterViewInit() {\n      this.attachToWatchdog();\n    }\n    // Implementing the OnDestroy interface.\n    ngOnDestroy() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.watchdog) {\n          yield this.watchdog.remove(this.id);\n        } else if (this.editorWatchdog && this.editorWatchdog.editor) {\n          yield this.editorWatchdog.destroy();\n          this.editorWatchdog = undefined;\n        }\n      });\n    }\n    // Implementing the ControlValueAccessor interface (only when binding to ngModel).\n    writeValue(value) {\n      // This method is called with the `null` value when the form resets.\n      // A component's responsibility is to restore to the initial state.\n      if (value === null) {\n        value = '';\n      }\n      // If already initialized.\n      if (this.editorInstance) {\n        // The lock mechanism prevents from calling `cvaOnChange()` during changing\n        // the editor state. See #139\n        this.isEditorSettingData = true;\n        this.editorInstance.data.set(value);\n        this.isEditorSettingData = false;\n      }\n      // If not, wait for it to be ready; store the data.\n      else {\n        // If the editor element is already available, then update its content.\n        this.data = value;\n        // If not, then wait until it is ready\n        // and change data only for the first `ready` event.\n        this.ready.pipe(first()).subscribe(editor => {\n          editor.data.set(this.data);\n        });\n      }\n    }\n    // Implementing the ControlValueAccessor interface (only when binding to ngModel).\n    registerOnChange(callback) {\n      this.cvaOnChange = callback;\n    }\n    // Implementing the ControlValueAccessor interface (only when binding to ngModel).\n    registerOnTouched(callback) {\n      this.cvaOnTouched = callback;\n    }\n    // Implementing the ControlValueAccessor interface (only when binding to ngModel).\n    setDisabledState(isDisabled) {\n      // If already initialized.\n      if (this.editorInstance) {\n        if (isDisabled) {\n          this.editorInstance.enableReadOnlyMode(ANGULAR_INTEGRATION_READ_ONLY_LOCK_ID);\n        } else {\n          this.editorInstance.disableReadOnlyMode(ANGULAR_INTEGRATION_READ_ONLY_LOCK_ID);\n        }\n      }\n      // Store the state anyway to use it once the editor is created.\n      this.initiallyDisabled = isDisabled;\n    }\n    /**\n     * Creates the editor instance, sets initial editor data, then integrates\n     * the editor with the Angular component. This method does not use the `editor.data.set()`\n     * because of the issue in the collaboration mode (#6).\n     */\n    attachToWatchdog() {\n      // TODO: elementOrData parameter type can be simplified to HTMLElemen after templated Watchdog will be released.\n      const creator = (elementOrData, config) => {\n        return this.ngZone.runOutsideAngular(() => __awaiter(this, void 0, void 0, function* () {\n          this.elementRef.nativeElement.appendChild(elementOrData);\n          const editor = yield this.editor.create(elementOrData, config);\n          if (this.initiallyDisabled) {\n            editor.enableReadOnlyMode(ANGULAR_INTEGRATION_READ_ONLY_LOCK_ID);\n          }\n          this.ngZone.run(() => {\n            this.ready.emit(editor);\n          });\n          this.setUpEditorEvents(editor);\n          return editor;\n        }));\n      };\n      const destructor = editor => __awaiter(this, void 0, void 0, function* () {\n        yield editor.destroy();\n        this.elementRef.nativeElement.removeChild(this.editorElement);\n      });\n      const emitError = e => {\n        // Do not run change detection by re-entering the Angular zone if the `error`\n        // emitter doesn't have any subscribers.\n        // Subscribers are pushed onto the list whenever `error` is listened inside the template:\n        // `<ckeditor (error)=\"onError(...)\"></ckeditor>`.\n        if (hasObservers(this.error)) {\n          this.ngZone.run(() => this.error.emit(e));\n        }\n      };\n      const element = document.createElement(this.tagName);\n      const config = this.getConfig();\n      this.editorElement = element;\n      // Based on the presence of the watchdog decide how to initialize the editor.\n      if (this.watchdog) {\n        // When the context watchdog is passed add the new item to it based on the passed configuration.\n        this.watchdog.add({\n          id: this.id,\n          type: 'editor',\n          creator,\n          destructor,\n          sourceElementOrData: element,\n          config\n        }).catch(e => {\n          emitError(e);\n        });\n        this.watchdog.on('itemError', (_, {\n          itemId\n        }) => {\n          if (itemId === this.id) {\n            emitError();\n          }\n        });\n      } else {\n        // In the other case create the watchdog by hand to keep the editor running.\n        const editorWatchdog = new this.editor.EditorWatchdog(this.editor, this.editorWatchdogConfig);\n        editorWatchdog.setCreator(creator);\n        editorWatchdog.setDestructor(destructor);\n        editorWatchdog.on('error', emitError);\n        this.editorWatchdog = editorWatchdog;\n        this.ngZone.runOutsideAngular(() => {\n          // Note: must be called outside of the Angular zone too because `create` is calling\n          // `_startErrorHandling` within a microtask which sets up `error` listener on the window.\n          editorWatchdog.create(element, config).catch(e => {\n            emitError(e);\n          });\n        });\n      }\n    }\n    getConfig() {\n      if (this.data && this.config.initialData) {\n        throw new Error('Editor data should be provided either using `config.initialData` or `data` properties.');\n      }\n      const config = Object.assign({}, this.config);\n      // Merge two possible ways of providing data into the `config.initialData` field.\n      const initialData = this.config.initialData || this.data;\n      if (initialData) {\n        // Define the `config.initialData` only when the initial content is specified.\n        config.initialData = initialData;\n      }\n      return config;\n    }\n    /**\n     * Integrates the editor with the component by attaching related event listeners.\n     */\n    setUpEditorEvents(editor) {\n      const modelDocument = editor.model.document;\n      const viewDocument = editor.editing.view.document;\n      modelDocument.on('change:data', evt => {\n        this.ngZone.run(() => {\n          if (this.disableTwoWayDataBinding) {\n            return;\n          }\n          if (this.cvaOnChange && !this.isEditorSettingData) {\n            const data = editor.data.get();\n            this.cvaOnChange(data);\n          }\n          this.change.emit({\n            event: evt,\n            editor\n          });\n        });\n      });\n      viewDocument.on('focus', evt => {\n        this.ngZone.run(() => {\n          this.focus.emit({\n            event: evt,\n            editor\n          });\n        });\n      });\n      viewDocument.on('blur', evt => {\n        this.ngZone.run(() => {\n          if (this.cvaOnTouched) {\n            this.cvaOnTouched();\n          }\n          this.blur.emit({\n            event: evt,\n            editor\n          });\n        });\n      });\n    }\n  }\n  CKEditorComponent.ɵfac = function CKEditorComponent_Factory(t) {\n    return new (t || CKEditorComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n  CKEditorComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: CKEditorComponent,\n    selectors: [[\"ckeditor\"]],\n    inputs: {\n      editor: \"editor\",\n      config: \"config\",\n      data: \"data\",\n      tagName: \"tagName\",\n      watchdog: \"watchdog\",\n      editorWatchdogConfig: \"editorWatchdogConfig\",\n      disableTwoWayDataBinding: \"disableTwoWayDataBinding\",\n      disabled: \"disabled\"\n    },\n    outputs: {\n      ready: \"ready\",\n      change: \"change\",\n      blur: \"blur\",\n      focus: \"focus\",\n      error: \"error\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      useExisting: forwardRef(() => CKEditorComponent),\n      multi: true\n    }]), i0.ɵɵNgOnChangesFeature],\n    decls: 1,\n    vars: 0,\n    template: function CKEditorComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, CKEditorComponent_ng_template_0_Template, 0, 0, \"ng-template\");\n      }\n    },\n    encapsulation: 2\n  });\n  return CKEditorComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction hasObservers(emitter) {\n  // Cast to `any` because `observed` property is available in RxJS >= 7.2.0.\n  // Fallback to checking `observers` list if this property is not defined.\n  return emitter.observed || emitter.observers.length > 0;\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nlet CKEditorModule = /*#__PURE__*/(() => {\n  class CKEditorModule {}\n  CKEditorModule.ɵfac = function CKEditorModule_Factory(t) {\n    return new (t || CKEditorModule)();\n  };\n  CKEditorModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: CKEditorModule\n  });\n  CKEditorModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[FormsModule, CommonModule]]\n  });\n  return CKEditorModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CKEditorComponent, CKEditorModule };\n//# sourceMappingURL=ckeditor-ckeditor5-angular.mjs.map","map":null,"metadata":{},"sourceType":"module"}